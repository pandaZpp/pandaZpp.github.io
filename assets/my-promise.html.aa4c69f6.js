import{r as p,o as t,c as e,a as n,b as o,F as c,d as s,e as l}from"./app.0f26bafb.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},i=n("h1",{id:"\u624B\u6495promise-ts",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u624B\u6495promise-ts","aria-hidden":"true"},"#"),s(" \u624B\u6495"),n("code",null,"Promise ts"),s("\u{1F525}")],-1),k=s("\u5B8C\u6574\u7248\u4EE3\u7801 "),b={href:"https://github.com/jiqiangzhu/learn-ts/blob/master/src/ts-promise.ts",target:"_blank",rel:"noopener noreferrer"},m=s("\u70B9\u6211"),d=l(`<p>\u672C\u6587\u4F1A\u6839\u636E\u901A\u8FC7\u67E5\u770B\u539F\u751F<code>Promise</code>\u7684\u8F93\u51FA\u7ED3\u679C\u6765\u9010\u6B65\u5B9E\u73B0\u81EA\u5B9A\u4E49<code>myPromise</code>\uFF0C\u4F7F\u7528<code>class</code></p><p><strong>\u4E3A\u907F\u514D\u51FA\u73B0<code>this</code>\u6307\u5411\u95EE\u9898\uFF0C\u4F7F\u7528\u7BAD\u5934\u51FD\u6570</strong></p><blockquote><p><code>then\u3001catch\u3001Promise.resolve\u3001Promise.reject\u3001all\u3001race\u3001finally</code></p></blockquote><h3 id="promise-prototype-then\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-prototype-then\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> \u2B50<code>Promise.prototype.then</code>\u65B9\u6CD5\u5B9E\u73B0</h3><p><strong>\u{1F604}then\u65B9\u6CD5\u662FPromise\u6700\u91CD\u8981\u7684\u4E00\u4E2A\u65B9\u6CD5,\u540E\u9762\u7684\u6240\u6709\u65B9\u6CD5\u90FD\u8981\u8C03\u7528\u6B64\u65B9\u6CD5</strong></p><p>\u5148\u67E5\u770B\u4E00\u4E0B\u539F\u751F<code>Promise</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span> <span class="token comment">// PromiseResult 111 PromiseState fullfilled</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u7531\u6B64\u53EF\u77E5\u9700\u8981\u4F20\u9012\u7ED9<code>Promise</code>\u6784\u9020\u51FD\u6570\u4E00\u4E2A\u51FD\u6570\uFF0C\u5E76\u6709\u4E24\u4E2A\u56DE\u8C03\u51FD\u6570\u53C2\u6570<code>resolve, reject</code>\uFF0C\u8FD9\u91CC\u79F0\u6B64\u51FD\u6570\u4E4B\u4E3A\u{1F47F}<code>executor</code>\uFF0C\u4E24\u4E2A\u56DE\u8C03\u51FD\u6570\u5206\u522B\u4E3A\u6210\u529F\u7684\u56DE\u8C03\u548C\u5931\u8D25\u7684\u56DE\u8C03\uFF0C<code>Promise</code>\u6709\u4E09\u79CD\u72B6\u6001<code>PromiseState: pending|fulfilled|rejected</code>(\u5E76\u4E14\u72B6\u6001\u4E00\u65E6\u6539\u53D8\u4E0D\u5141\u8BB8\u518D\u6B21\u66F4\u6539)\u548C\u4E00\u4E2A\u8FD4\u56DE\u7ED3\u679C<code>PromiseResult</code>\u53EF\u4EE5\u4E3A\u4EFB\u610F\u7C7B\u578B</p><p><code>myPromise</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">myPromise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>
  <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span>
  <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span>
  PromiseState<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span>
  PromiseResult<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> result
  <span class="token punctuation">}</span>
  <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> reason
  <span class="token punctuation">}</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u539F\u751F</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> resPromise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8F93\u51FA 111</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;resPromise&#39;</span><span class="token punctuation">,</span> resPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console Promise {&lt;pending&gt;}</span>
<span class="token comment">//[[Prototype]]: Promise</span>
<span class="token comment">//[[PromiseState]]: &quot;fulfilled&quot;</span>
<span class="token comment">//[[PromiseResult]]: 111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u53EF\u4EE5\u770B\u5230<code>then</code>\u65B9\u6CD5\u7684\u8FD4\u56DE\u503C\u4E5F\u662F\u4E00\u4E2A<code>Promise</code>\uFF0C\u5E76\u4E14<code>Promise.then</code>\u91CC\u7684\u56DE\u8C03\u65F6\u5F02\u6B65\u6267\u884C\u7684\uFF0C\u8FD9\u91CC\u5206\u522B\u7ED9then\u65B9\u6CD5\u7684\u4E24\u4E2A\u56DE\u8C03\u51FD\u6570\u9ED8\u8BA4\u503C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">myPromise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>
  <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span>
  <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span>
  PromiseState<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span>
  PromiseResult<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">static</span> defaultOnResolve<span class="token operator">:</span> <span class="token function-variable function">Function</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value
  <span class="token keyword">static</span> defaultOnReject<span class="token operator">:</span> <span class="token function-variable function">Function</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> reason
  <span class="token punctuation">}</span>
  <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> result
  <span class="token punctuation">}</span>
  <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> reason
  <span class="token punctuation">}</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  then <span class="token operator">=</span> <span class="token punctuation">(</span>onResolve <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnResolve<span class="token punctuation">,</span> onReject <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnReject<span class="token punctuation">)</span><span class="token operator">:</span> myPromise <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="promise\u7684executor\u91CC\u7684\u4EE3\u7801\u662F\u5F02\u6B65\u65F6\u8BE5\u5982\u4F55\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#promise\u7684executor\u91CC\u7684\u4EE3\u7801\u662F\u5F02\u6B65\u65F6\u8BE5\u5982\u4F55\u5904\u7406" aria-hidden="true">#</a> \u2753<code>Promise</code>\u7684<code>executor</code>\u91CC\u7684\u4EE3\u7801\u662F\u5F02\u6B65\u65F6\u8BE5\u5982\u4F55\u5904\u7406\uFF1F</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6C38\u8FDC\u4E0D\u4F1A\u8F93\u51FA</span>
  <span class="token keyword">return</span> value
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u4EE5\u4E0A\u4EE3\u7801<code>console.log(value); </code>\u6C38\u8FDC\u4E0D\u4F1A\u8F93\u51FA</p><p>\u4E3A\u4F55\uFF1F\u8FD9\u4E2A\u65F6\u5019\u9700\u8981\u4ED4\u7EC6\u770B\u4E00\u4E0B\u6574\u4E2A\u6267\u884C\u8FC7\u7A0B\uFF0C\u6267\u884C<code>then</code>\u65B9\u6CD5\u65F6\uFF0C\u56E0\u4E3A\u6709\u5B9A\u65F6\u7684\u7F18\u6545\uFF0C\u6240\u4EE5<code>Promise</code>\u7684\u72B6\u6001\u8FD8\u662F<code>pending</code>\uFF0C\u4F46\u662F\u76EE\u524D\u8FD8\u672A\u5BF9<code>pending</code>\u72B6\u6001\u8FDB\u884C\u5904\u7406</p><p>\u5FC5\u987B\u5F53<code>Promise</code>\u7684\u72B6\u6001\u786E\u5B9A\u4E86\u4E4B\u540E\u624D\u80FD\u6267\u884C\u5BF9\u5E94\u7684\u56DE\u8C03\uFF0C\u6240\u4EE5\u5F53<code>pending</code>\u65F6\uFF0C\u628A\u56DE\u8C03\u8FDB\u884C\u5B58\u50A8\uFF0C\u5F53\u6267\u884C<code>resolve/reject</code>\u65F6\uFF0C\u518D\u628A\u5B58\u50A8\u7684\u56DE\u8C03\u51FD\u6570\u505A\u904D\u5386\u6267\u884C\u5373\u53EF</p><p>\u4EE3\u7801\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">myPromise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span>
  <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span>
  <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span>
  PromiseState<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span>
  PromiseResult<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  callbacks<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> onResolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> onReject<span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">static</span> defaultOnResolve<span class="token operator">:</span> <span class="token function-variable function">Function</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value
  <span class="token keyword">static</span> defaultOnReject<span class="token operator">:</span> <span class="token function-variable function">Function</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> reason
  <span class="token punctuation">}</span>
  <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> result
    <span class="token comment">// \u904D\u5386\u56DE\u8C03</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> reason
    <span class="token comment">// \u904D\u5386\u56DE\u8C03</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span><span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>executor<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  then <span class="token operator">=</span> <span class="token punctuation">(</span>onResolve <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnResolve<span class="token punctuation">,</span> onReject <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnReject<span class="token punctuation">)</span><span class="token operator">:</span> myPromise <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//\u5B58\u50A8\u56DE\u8C03</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token function-variable function">onResolve</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">onReject</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h3 id="\u5F53then\u65B9\u6CD5\u4E2D\u8FD4\u56DE\u7684\u662F\u4E00\u4E2Apromise\u5BF9\u8C61-\u80FD\u5426\u5728\u540E\u9762\u7684then\u4E2D\u62FF\u5230\u4E0A\u9762\u7684\u503C\u5462" tabindex="-1"><a class="header-anchor" href="#\u5F53then\u65B9\u6CD5\u4E2D\u8FD4\u56DE\u7684\u662F\u4E00\u4E2Apromise\u5BF9\u8C61-\u80FD\u5426\u5728\u540E\u9762\u7684then\u4E2D\u62FF\u5230\u4E0A\u9762\u7684\u503C\u5462" aria-hidden="true">#</a> \u2753\u5F53<code>then</code>\u65B9\u6CD5\u4E2D\u8FD4\u56DE\u7684\u662F\u4E00\u4E2A<code>Promise</code>\u5BF9\u8C61\uFF0C\u80FD\u5426\u5728\u540E\u9762\u7684<code>then</code>\u4E2D\u62FF\u5230\u4E0A\u9762\u7684\u503C\u5462\uFF1F</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">22222</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">// \u80FD\u5426\u8F93\u51FA 22222 ?</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u7B54\u6848\u662F\u4E0D\u80FD\uFF0C\u8FD9\u91CC\u62FF\u5230\u7684\u662F\u4E00\u4E2A<code>Promise</code>\u5BF9\u8C61\uFF0C\u5982\u4F55\u62FF\u5230\u9884\u671F\u7684\u503C\u5462\uFF1F\u9700\u8981\u5728<code>then</code>\u65B9\u6CD5\u4E2D\u8FDB\u884C\u5224\u65AD\uFF0C<strong>\u5982\u679C\u503C\u4E3A<code>Promise</code>\u5BF9\u8C61\uFF0C\u90A3\u4E48\u5C31\u4F7F\u7528\u9012\u5F52\u518D\u6B21\u8C03\u7528<code>then</code></strong></p><p>\u5B8C\u6574<code>then</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>then <span class="token operator">=</span> <span class="token punctuation">(</span>onResolve <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnResolve<span class="token punctuation">,</span> onReject <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnReject<span class="token punctuation">)</span><span class="token operator">:</span> myPromise <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> myPromise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token function-variable function">onResolve</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">onReject</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">myPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                  <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h2 id="promise-prototype-catch\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-prototype-catch\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <code>Promise.prototype.catch</code>\u65B9\u6CD5\u5B9E\u73B0</h2><p>\u7531\u4E8E<code>then</code>\u65B9\u6CD5\u5DF2\u7ECF\u7ED9\u4E86\u9ED8\u8BA4\u503C\uFF0C<code>catch</code>\u65B9\u6CD5\u76F4\u63A5\u8C03\u7528<code>then</code>\u65B9\u6CD5\u5373\u53EF\uFF0C\u6210\u529F\u7684\u56DE\u8C03\u51FD\u6570\u8BBE\u7F6E\u6210<code>undefined</code>\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>onReject <span class="token operator">=</span> myPromise<span class="token punctuation">.</span>defaultOnReject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="promise-resolve\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-resolve\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <code>Promise.resolve</code>\u65B9\u6CD5\u5B9E\u73B0</h2><p><strong>\u6B64\u65B9\u6CD5\u5C5E\u4E8EPromise\u7C7B\u7684\u65B9\u6CD5\uFF0C\u901A\u8FC7\u7C7B\u76F4\u63A5\u8C03\u7528\u7684\uFF0C\u53EF\u4EE5\u5C06Promise\u7684\u72B6\u6001\u76F4\u63A5\u8BBE\u7F6E\u4E3A\u6210\u529F\u72B6\u6001</strong></p><p>\u8C03\u7528then\u65B9\u6CD5\uFF0C\u65B9\u6CD5\u4F53\u5185\u76F4\u63A5\u6267\u884Cresolve\u56DE\u8C03\u5373\u53EF</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="promise-reject\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-reject\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <code>Promise.reject</code>\u65B9\u6CD5\u5B9E\u73B0</h2><p>\u540C<code>Promise.resolve</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="promise-all\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-all\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <code>Promise.all</code>\u65B9\u6CD5\u5B9E\u73B0</h2><p>\u7B80\u4ECB\uFF1A\u6B64\u65B9\u6CD5\u63A5\u6536\u4E00\u4E2A<code>Promise</code>\u5BF9\u8C61\u6570\u7EC4\uFF0C\u5F53\u6240\u6709<code>Promise</code>\u7684\u7ED3\u679C\u90FD\u4E3A\u6210\u529F\u65F6\uFF0C\u6B64\u65B9\u6CD5\u624D\u8FD4\u56DE\u6210\u529F\uFF0C\u5426\u5219\u8FD4\u56DE\u5931\u8D25</p><p>\u6570\u7EC4\u4E2D<code>Promise</code>\u662F\u5E76\u53D1\u6267\u884C(\u53EF\u4EE5\u81EA\u5DF1\u8FDB\u884C\u9A8C\u8BC1)\uFF0C\u4F46\u662F<code>PromiseResult</code>\u7684\u7ED3\u679C\u786E\u662F\u6309\u987A\u5E8F\u8FD4\u56DE\u7684\uFF01</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>promiseArr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>myPromise<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> myPromise <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> PromiseResult<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                PromiseResult<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment">//\u5BF9\u5E94promise\u5BF9\u8C61\u7D22\u5F15</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>PromiseResult<span class="token punctuation">.</span>length <span class="token operator">===</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u6240\u6709\u90FD\u6210\u529F\u4E86</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span>PromiseResult<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="promise-race\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-race\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <code>Promise.race</code>\u65B9\u6CD5\u5B9E\u73B0</h2><p>\u4E0E<code>Promise.all</code>\u65B9\u6CD5\u76F8\u53CD\uFF0C<code>race</code>\u65B9\u6CD5\u4F1A\u628A\u6700\u5148\u8FD4\u56DE\u7684\u7ED3\u679C\u5F53\u4F5C\u8FD4\u56DE\u503C</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span>promiseArr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>myPromise<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> myPromise <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="promise-prototype-finally\u65B9\u6CD5\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#promise-prototype-finally\u65B9\u6CD5\u5B9E\u73B0" aria-hidden="true">#</a> <code>Promise.prototype.finally</code>\u65B9\u6CD5\u5B9E\u73B0</h2><p>\u6B64\u65B9\u6CD5\u4F1A\u5728<code>then/catch</code>\u540E\u9762\u6267\u884C\uFF0C\u{1F49D}<code>ES2018</code>\u65B0\u589E\uFF0C\u5728\u6B64\u4E4B\u524D\uFF0C\u6709\u4E9B\u4EE3\u7801\u5728<code>then\u548Ccatch</code>\u4E2D\u53EF\u80FD\u8981\u91CD\u590D\u4E66\u5199\uFF0C<code>finally</code>\u51FA\u73B0\u4E4B\u540E\u5C31\u5F88\u597D\u7684\u89E3\u51B3\u4E86\u8FD9\u4E2A\u95EE\u9898</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>finally <span class="token operator">=</span> <span class="token punctuation">(</span>executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> myPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">)</span> <span class="token comment">// \u4E3A\u4E86\u5C06\u503C\u7EE7\u7EED\u4F20\u9012\u4F9B\u94FE\u5F0F\u8C03\u7528</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> myPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">//\u4E3A\u4E86\u5C06\u503C\u7EE7\u7EED\u4F20\u9012\u4F9B\u94FE\u5F0F\u8C03\u7528</span>
            <span class="token keyword">throw</span> reason
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="promise-any\u65B9\u6CD5\u5B9E\u73B0-es2021\u65B0\u589E" tabindex="-1"><a class="header-anchor" href="#promise-any\u65B9\u6CD5\u5B9E\u73B0-es2021\u65B0\u589E" aria-hidden="true">#</a> \u2B50<code>Promise.any</code>\u65B9\u6CD5\u5B9E\u73B0(\u{1F195}<code>ES2021\u65B0\u589E</code>)</h2><p>\u6B64\u65B9\u6CD5\u4E0E<code>race</code>\u65B9\u6CD5\u5341\u5206\u76F8\u4F3C\uFF0C\u4E0D\u540C\u7684\u662F\uFF0C<code>race</code>\u53EA\u8981\u6709\u4E00\u4E2A<code>reject</code>\uFF0C\u5C31\u76F4\u63A5\u8FD4\u56DE<code>reject</code>\u4E86\uFF0C\u4F46\u662F<code>any</code>\u662F\u6240\u6709\u7684\u90FD<code>reject</code>\u4E86\u624D<code>reject</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>promiseArr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>myPromise<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> myPromise <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">myPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span> reject<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> PromiseResult<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        promiseArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                PromiseResult<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value
                <span class="token keyword">if</span> <span class="token punctuation">(</span>PromiseResult<span class="token punctuation">.</span>length <span class="token operator">===</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span>PromiseResult<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>reason<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,49);function y(h,f){const a=p("ExternalLinkIcon");return t(),e(c,null,[i,n("p",null,[k,n("a",b,[m,o(a)])]),d],64)}var P=u(r,[["render",y]]);export{P as default};
